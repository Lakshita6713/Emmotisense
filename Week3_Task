import cv2
import numpy as np
import matplotlib.pyplot as plt
# Show function
def show(img, title="Image", cmap_type=None):
    plt.figure(figsize=(5, 5))
    if len(img.shape) == 3:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img, cmap=cmap_type)
    plt.title(title)
    plt.axis("off")
    plt.show()
# Load image
image_path = "/content/image.jpeg"  # Replace with your image path
img = cv2.imread(image_path)
show(img, "Original")
# ========== SECTION 6: THRESHOLDING ==========
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Binary threshold
_, binary_thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
show(binary_thresh, "Binary Threshold", cmap_type='gray')

# Adaptive Mean Thresholding
adaptive_mean = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                      cv2.THRESH_BINARY, 11, 2)
show(adaptive_mean, "Adaptive Mean", cmap_type='gray')

# Otsu's Thresholding
_, otsu = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
show(otsu, "Otsu Threshold", cmap_type='gray')

# ========== SECTION 7: MORPHOLOGICAL TRANSFORMATIONS ==========
kernel = np.ones((5, 5), np.uint8)

# Erosion
erosion = cv2.erode(binary_thresh, kernel, iterations=1)
show(erosion, "Erosion", cmap_type='gray')

# Dilation
dilation = cv2.dilate(binary_thresh, kernel, iterations=1)
show(dilation, "Dilation", cmap_type='gray')

# Opening
opening = cv2.morphologyEx(binary_thresh, cv2.MORPH_OPEN, kernel)
show(opening, "Opening", cmap_type='gray')

# Closing
closing = cv2.morphologyEx(binary_thresh, cv2.MORPH_CLOSE, kernel)
show(closing, "Closing", cmap_type='gray')

# ========== SECTION 8: EDGE DETECTION ==========
# Laplacian
lap = cv2.Laplacian(gray, cv2.CV_64F)
lap = np.uint8(np.absolute(lap))
show(lap, "Laplacian", cmap_type='gray')

# Sobel
sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0)
sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1)
sobel = cv2.bitwise_or(np.uint8(np.absolute(sobelx)), np.uint8(np.absolute(sobely)))
show(sobel, "Sobel", cmap_type='gray')

# Canny
canny = cv2.Canny(gray, 100, 200)
show(canny, "Canny", cmap_type='gray')

# ========== SECTION 9: TRANSFORMATION ==========
# Resize
def resize(pic):
    scale_percent = 500 / pic.shape[0]
    width = int(pic.shape[1] * scale_percent)
    height = int(pic.shape[0] * scale_percent)
    dim = (width, height)
    return cv2.resize(pic, dim, interpolation=cv2.INTER_AREA)

img_resized = resize(img)
show(img_resized, "Resized")

# Detect contours
gray_blur = cv2.GaussianBlur(cv2.cvtColor(img_resized, cv2.COLOR_BGR2GRAY), (5, 5), 0)
edges = cv2.Canny(gray_blur, 75, 200)

contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]

def find_screen_contour(contours):
    for c in contours:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            return approx
    return None

screen_cnt = find_screen_contour(contours)
if screen_cnt is not None:
    cv2.drawContours(img_resized, [screen_cnt], -1, (0, 255, 0), 2)
    show(img_resized, "Contour Found")

    # Perspective transform
    def order_points(pts):
        rect = np.zeros((4, 2), dtype="float32")
        s = pts.sum(axis=1)
        rect[0] = pts[np.argmin(s)]
        rect[2] = pts[np.argmax(s)]
        diff = np.diff(pts, axis=1)
        rect[1] = pts[np.argmin(diff)]
        rect[3] = pts[np.argmax(diff)]
        return rect

    rect = order_points(screen_cnt.reshape(4, 2))
    (tl, tr, br, bl) = rect

    widthA = np.linalg.norm(br - bl)
    widthB = np.linalg.norm(tr - tl)
    maxWidth = max(int(widthA), int(widthB))

    heightA = np.linalg.norm(tr - br)
    heightB = np.linalg.norm(tl - bl)
    maxHeight = max(int(heightA), int(heightB))

    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")

    M = cv2.getPerspectiveTransform(rect, dst)
    warp = cv2.warpPerspective(img_resized, M, (maxWidth, maxHeight))

    show(warp, "Warped Image")
else:
    print("Contour not found!")
